"""Create new tables: UserLLMConfig

Revision ID: d2d82d448b8a
Revises: 9bdf8f92ceff
Create Date: 2025-07-10 15:20:27.120316

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision: str = 'd2d82d448b8a'
down_revision: Union[str, None] = '9bdf8f92ceff'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None
# Define your sets
ADAM_SET = {
    'adae', 'adcm', 'addv', 'adecog', 'adeff', 'adef1', 'adef2', 'adeg', 'adex',
    'adis', 'adlb', 'admh', 'adpc', 'adpe', 'adpr', 'adqs', 'adsl', 'adtte',
    'adtr', 'adtte1', 'adtte2', 'advs'
}
 
SDTM_SET = {
    'ae', 'cm', 'cv', 'dd', 'dm', 'ds', 'dv', 'ec', 'eg', 'ex', 'fa', 'ie', 'is',
    'lb', 'mb', 'mh', 'mi', 'nv', 'oe', 'pc', 'pe', 'pr', 'qs', 'rs', 'se', 'ss',
    'su', 'suppae', 'suppcm', 'suppdd', 'suppcv', 'suppdm', 'suppds', 'suppdv',
    'suppec', 'suppeg', 'suppex', 'suppie', 'suppfa', 'suppis', 'supplb', 'suppmb',
    'suppmh', 'suppmi', 'suppnv', 'suppoe', 'supppc', 'supppe', 'supppr', 'supprs',
    'suppss', 'suppsv', 'supptr', 'supptu', 'suppzi', 'sv', 'ta', 'te', 'ti', 'tr',
    'ts', 'tu', 'tv', 'vs', 'xv', 'zi'
}

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('LLMProvider',
    sa.Column('Id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('Name', sa.String(length=100), nullable=False),
    sa.Column('IsActive', sa.Boolean(), server_default='1', nullable=False),
    sa.PrimaryKeyConstraint('Id'),
    sa.UniqueConstraint('Name')
    )
    op.create_table('LLMModel',
    sa.Column('Id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ProviderId', sa.Integer(), nullable=False),
    sa.Column('ModelName', sa.String(length=100), nullable=False),
    sa.Column('IsActive', sa.Boolean(), server_default='1', nullable=False),
    sa.ForeignKeyConstraint(['ProviderId'], ['LLMProvider.Id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('Id'),
    sa.UniqueConstraint('ProviderId', 'ModelName', name='UQ_Provider_Model')
    )
    op.create_table('UserLLMConfig',
    sa.Column('Id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('UserId', sa.Integer(), nullable=False),
    sa.Column('ProviderId', sa.Integer(), nullable=False),
    sa.Column('ModelId', sa.Integer(), nullable=False),
    sa.Column('CreatedAt', sa.DateTime(), nullable=False),
    sa.Column('UpdatedAt', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['ModelId'], ['LLMModel.Id'], ondelete='NO ACTION'),
    sa.ForeignKeyConstraint(['ProviderId'], ['LLMProvider.Id'], ondelete='NO ACTION'),
    sa.ForeignKeyConstraint(['UserId'], ['User.UserId'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('Id'),
    sa.UniqueConstraint('UserId', name='UQ_User_Config')
    )

    op.create_index('ix_UserLLMConfig_UserId_ModelId', 'UserLLMConfig', ['UserId', 'ModelId'], unique=False)
     # --- Insert into LLMProvider ---
    op.execute(
        text("""
            INSERT INTO LLMProvider (Name, IsActive) VALUES 
            ('OpenAI', 0),
            ('Azure OpenAI', 1),
            ('Claude', 0)
        """)
    )
    # Insert into LLMModel with dynamic ProviderId lookup
    op.execute(text("""
        INSERT INTO LLMModel (ProviderId, ModelName, IsActive)
        VALUES (
            (SELECT Id FROM LLMProvider WHERE Name = 'OpenAI'), 'gpt-4o', 0
        )
    """))

    op.execute(text("""
        INSERT INTO LLMModel (ProviderId, ModelName, IsActive)
        VALUES (
            (SELECT Id FROM LLMProvider WHERE Name = 'Azure OpenAI'), 'gpt-4.1', 1
        )
    """))

    op.execute(text("""
        INSERT INTO LLMModel (ProviderId, ModelName, IsActive)
        VALUES (
            (SELECT Id FROM LLMProvider WHERE Name = 'Azure OpenAI'), 'gpt-4o-mini', 1
        )
    """))

    op.execute(text("""
        INSERT INTO LLMModel (ProviderId, ModelName, IsActive)
        VALUES (
            (SELECT Id FROM LLMProvider WHERE Name = 'Claude'), 'claude-3-haiku', 0
        )
    """))
     # Create the table
    op.create_table(
    'DomainClassification',
    sa.Column('Id', sa.Integer(), primary_key=True, nullable=False),
    sa.Column('DomainName', sa.String(50), nullable=False, unique=True),
    sa.Column('ClassificationType', sa.String(10), nullable=False, server_default=sa.text("'SDTM'")),
    sa.Column('IsAIGenerated', sa.Boolean(), nullable=False, server_default=sa.text('0')),
    sa.Column('CreatedAt', sa.DateTime(), server_default=sa.text('GETDATE()')),
    sa.Column('CreatedBy', sa.String(50), server_default=sa.text("'System'")),
    
    # Enforcing constraints
    sa.CheckConstraint("ClassificationType IN ('ADaM', 'SDTM')", name='check_classification_type'),
    sa.CheckConstraint("IsAIGenerated IN (0, 1)", name='check_is_ai_generated'),
    sa.CheckConstraint("CreatedBy IN ('System', 'AI')", name='check_created_by')
)
 
    # Insert ADaM domains
    for domain in ADAM_SET:
        op.execute(
            text("""
                INSERT INTO DomainClassification (DomainName, ClassificationType)
                VALUES (:domain, 'ADaM')
            """).bindparams(domain=domain)
        )
 
    # Insert SDTM domains
    for domain in SDTM_SET:
        op.execute(
            text("""
                INSERT INTO DomainClassification (DomainName, ClassificationType)
                VALUES (:domain, 'SDTM')
            """).bindparams(domain=domain)
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_UserLLMConfig_UserId_ModelId', table_name='UserLLMConfig')
    op.drop_table('UserLLMConfig')
    op.drop_table('LLMModel')
    op.drop_table('LLMProvider')
    op.drop_table('DomainClassification')
    # ### end Alembic commands ###
